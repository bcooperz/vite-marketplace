

 - Backend 
  = type definitions underneath database project? -- what are different ways these types can be checked against apis called in frontend?
  = how to setup authentication checks for certain api endpoints?

  = dockerise backend
  = security
     - HTTP only, SameSite, Secure
     - CORS
     - XSS
     - CSRF
  = CI/CD
  = tests
     - E2E tests for registration
     - Unit tests for validation
     - Consider what else would be useful

  = structure:
├── models/
│   ├── user.model.ts
│   └── session.model.ts
├── services/
│   ├── auth.service.ts
│   └── session.service.ts
├── middleware/
│   ├── auth.middleware.ts
│   ├── rateLimiter.ts
├── controllers/
│   └── auth.controller.ts

  = Way to connect types between backend and frontend
  = 


 - frontend
  = dependencies: @hookform/resolvers zod react-toastify
  = structure:
src/
├── components/
│   ├── auth/
│   │   ├── RegisterForm.tsx
│   │   ├── PasswordStrengthMeter.tsx
├── hooks/
│   └── useAuth.ts
├── services/
│   └── api/
│       ├── auth.ts
│       └── axios.ts
├── types/
│   └── auth.ts
└── utils/
    ├── validation.ts
    └── errorHandling.ts

// validation.ts
export const passwordSchema = z.string()
  .min(8, "Password must be at least 8 characters")
  .regex(/[A-Z]/, "Password must contain at least one uppercase letter")
  .regex(/[a-z]/, "Password must contain at least one lowercase letter")
  .regex(/[0-9]/, "Password must contain at least one number")
  .regex(/[^A-Za-z0-9]/, "Password must contain at least one special character");

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';

const registerSchema = z.object({
  email: z.string().email(),
  password: passwordSchema,
  confirmPassword: z.string(),
  fullName: z.string().min(2)
}).refine(data => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"]
});

export const RegisterForm = () => {
  const { register, handleSubmit, formState: { errors } } = useForm({
    resolver: zodResolver(registerSchema)
  });
